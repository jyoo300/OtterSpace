{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\nimport firebase from \"./firebase\";\nconst firestore = firebase.firestore();\n/**** USERS ****/\n// Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\n\nexport function useUser(uid) {\n  return useQuery(uid && firestore.collection(\"users\").doc(uid));\n} // Update an existing user\n\nexport function updateUser(uid, data) {\n  return firestore.collection(\"users\").doc(uid).update(data);\n} // Create a new user\n\nexport function createUser(uid, data) {\n  return firestore.collection(\"users\").doc(uid).set({\n    uid,\n    ...data\n  }, {\n    merge: true\n  });\n}\n/**** ITEMS ****/\n\n/* Example query functions (modify to your needs) */\n// Fetch all items by owner (hook)\n\nexport function useItemsByOwner(owner) {\n  return useQuery(owner && firestore.collection(\"items\").where(\"owner\", \"==\", owner));\n} // Fetch item data\n\nexport function useItem(id) {\n  return useQuery(id && firestore.collection(\"items\").doc(id));\n} // Update an item\n\nexport function updateItem(id, data) {\n  return firestore.collection(\"items\").doc(id).update(data);\n} // Create a new item\n\nexport function createItem(data) {\n  return firestore.collection(\"items\").add(data);\n}\n/**** HELPERS ****/\n// Custom React hook that subscribes to a Firestore query\n\nfunction useQuery(query) {\n  const initialState = {\n    status: \"loading\",\n    data: undefined,\n    error: null\n  };\n  const [state, setState] = useState(initialState); // Gives us previous query object if query is the same\n  // ensuring we don't unsubscribe and resubscribe below.\n\n  const queryCached = useQueryCache(query);\n  useEffect(() => {\n    // Subscribe to query unless falsy, which indicates we're\n    // waiting on other data needed to construct the query object.\n    if (queryCached) {\n      return queryCached.onSnapshot(response => {\n        // Get data for collection or doc\n        const data = response.docs ? getCollectionData(response) : getDocData(response);\n        setState({\n          status: \"success\",\n          data: data,\n          error: null\n        });\n      }, error => {\n        setState(state => ({\n          status: \"error\",\n          data: undefined,\n          error: error\n        }));\n      });\n    } else {\n      // Reset back to initial state\n      if (state.status !== initialState.status) {\n        setState(initialState);\n      }\n    }\n  }, [queryCached]);\n  return state;\n} // Get doc data\n\n\nfunction getDocData(doc) {\n  return doc.exists === true ? {\n    id: doc.id,\n    ...doc.data()\n  } : null;\n} // Get array of doc data from collection\n\n\nfunction getCollectionData(collection) {\n  return collection.docs.map(doc => {\n    return {\n      id: doc.id,\n      ...doc.data()\n    };\n  });\n}\n\nfunction useQueryCache(query) {\n  // Ref for storing previous query object\n  const previousRef = useRef();\n  const previous = previousRef.current; // Determine if query object is equal to previous\n\n  const isEqual = !previous && !query || previous && query && previous.isEqual(query); // If not equal update previous to query (for next render)\n  // and then return new query below.\n\n  useEffect(() => {\n    if (!isEqual) {\n      previousRef.current = query;\n    }\n  });\n  return isEqual ? previous : query;\n} // firestore.collection(\"users\").add({\n//   first: \"Ada\",\n//   last: \"Lovelace\",\n//   born: 1815\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(error) {\n//   console.error(\"Error adding document: \", error);\n// });","map":{"version":3,"sources":["/Users/johnyoo/Desktop/OtterSpace/src/util/db.js"],"names":["useState","useEffect","useRef","firebase","firestore","useUser","uid","useQuery","collection","doc","updateUser","data","update","createUser","set","merge","useItemsByOwner","owner","where","useItem","id","updateItem","createItem","add","query","initialState","status","undefined","error","state","setState","queryCached","useQueryCache","onSnapshot","response","docs","getCollectionData","getDocData","exists","map","previousRef","previous","current","isEqual"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport firebase from \"./firebase\";\n\nconst firestore = firebase.firestore();\n\n/**** USERS ****/\n\n// Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\nexport function useUser(uid) {\n  return useQuery(uid && firestore.collection(\"users\").doc(uid));\n}\n\n// Update an existing user\nexport function updateUser(uid, data) {\n  return firestore.collection(\"users\").doc(uid).update(data);\n}\n\n// Create a new user\nexport function createUser(uid, data) {\n  return firestore\n    .collection(\"users\")\n    .doc(uid)\n    .set({ uid, ...data }, { merge: true });\n}\n\n/**** ITEMS ****/\n/* Example query functions (modify to your needs) */\n\n// Fetch all items by owner (hook)\nexport function useItemsByOwner(owner) {\n  return useQuery(\n    owner && firestore.collection(\"items\").where(\"owner\", \"==\", owner)\n  );\n}\n\n// Fetch item data\nexport function useItem(id) {\n  return useQuery(id && firestore.collection(\"items\").doc(id));\n}\n\n// Update an item\nexport function updateItem(id, data) {\n  return firestore.collection(\"items\").doc(id).update(data);\n}\n\n// Create a new item\nexport function createItem(data) {\n  return firestore.collection(\"items\").add(data);\n}\n\n/**** HELPERS ****/\n\n// Custom React hook that subscribes to a Firestore query\nfunction useQuery(query) {\n  const initialState = {\n    status: \"loading\",\n    data: undefined,\n    error: null,\n  };\n\n  const [state, setState] = useState(initialState);\n\n  // Gives us previous query object if query is the same\n  // ensuring we don't unsubscribe and resubscribe below.\n  const queryCached = useQueryCache(query);\n\n  useEffect(() => {\n    // Subscribe to query unless falsy, which indicates we're\n    // waiting on other data needed to construct the query object.\n    if (queryCached) {\n      return queryCached.onSnapshot(\n        (response) => {\n          // Get data for collection or doc\n          const data = response.docs\n            ? getCollectionData(response)\n            : getDocData(response);\n\n          setState({\n            status: \"success\",\n            data: data,\n            error: null,\n          });\n        },\n        (error) => {\n          setState((state) => ({\n            status: \"error\",\n            data: undefined,\n            error: error,\n          }));\n        }\n      );\n    } else {\n      // Reset back to initial state\n      if (state.status !== initialState.status) {\n        setState(initialState);\n      }\n    }\n  }, [queryCached]);\n\n  return state;\n}\n\n// Get doc data\nfunction getDocData(doc) {\n  return doc.exists === true ? { id: doc.id, ...doc.data() } : null;\n}\n\n// Get array of doc data from collection\nfunction getCollectionData(collection) {\n  return collection.docs.map((doc) => {\n    return { id: doc.id, ...doc.data() };\n  });\n}\n\nfunction useQueryCache(query) {\n  // Ref for storing previous query object\n  const previousRef = useRef();\n  const previous = previousRef.current;\n\n  // Determine if query object is equal to previous\n  const isEqual =\n    (!previous && !query) || (previous && query && previous.isEqual(query));\n\n  // If not equal update previous to query (for next render)\n  // and then return new query below.\n  useEffect(() => {\n    if (!isEqual) {\n      previousRef.current = query;\n    }\n  });\n\n  return isEqual ? previous : query;\n}\n\n// firestore.collection(\"users\").add({\n//   first: \"Ada\",\n//   last: \"Lovelace\",\n//   born: 1815\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(error) {\n//   console.error(\"Error adding document: \", error);\n// });"]},"metadata":{},"sourceType":"module"}