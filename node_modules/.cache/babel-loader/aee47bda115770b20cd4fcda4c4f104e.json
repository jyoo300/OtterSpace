{"ast":null,"code":"/*! firebase-admin v9.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteConfigApiClient = exports.TagColor = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar remote_config_utils_1 = require(\"./remote-config-utils\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\"); // Remote Config backend constants\n\n\nvar FIREBASE_REMOTE_CONFIG_V1_API = 'https://firebaseremoteconfig.googleapis.com/v1';\nvar FIREBASE_REMOTE_CONFIG_HEADERS = {\n  'X-Firebase-Client': 'fire-admin-node/9.0.0',\n  // There is a known issue in which the ETag is not properly returned in cases where the request\n  // does not specify a compression type. Currently, it is required to include the header\n  // `Accept-Encoding: gzip` or equivalent in all requests.\n  // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n  'Accept-Encoding': 'gzip'\n};\nvar TagColor;\n\n(function (TagColor) {\n  TagColor[\"BLUE\"] = \"Blue\";\n  TagColor[\"BROWN\"] = \"Brown\";\n  TagColor[\"CYAN\"] = \"Cyan\";\n  TagColor[\"DEEP_ORANGE\"] = \"Red Orange\";\n  TagColor[\"GREEN\"] = \"Green\";\n  TagColor[\"INDIGO\"] = \"Indigo\";\n  TagColor[\"LIME\"] = \"Lime\";\n  TagColor[\"ORANGE\"] = \"Orange\";\n  TagColor[\"PINK\"] = \"Pink\";\n  TagColor[\"PURPLE\"] = \"Purple\";\n  TagColor[\"TEAL\"] = \"Teal\";\n})(TagColor = exports.TagColor || (exports.TagColor = {}));\n/**\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\n *\n * @private\n */\n\n\nvar RemoteConfigApiClient =\n/** @class */\nfunction () {\n  function RemoteConfigApiClient(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  RemoteConfigApiClient.prototype.getTemplate = function () {\n    var _this = this;\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/remoteConfig\",\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS\n      };\n      return _this.httpClient.send(request);\n    }).then(function (resp) {\n      return _this.toRemoteConfigTemplate(resp);\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.getTemplateAtVersion = function (versionNumber) {\n    var _this = this;\n\n    var data = {\n      versionNumber: this.validateVersionNumber(versionNumber)\n    };\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/remoteConfig\",\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data: data\n      };\n      return _this.httpClient.send(request);\n    }).then(function (resp) {\n      return _this.toRemoteConfigTemplate(resp);\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.validateTemplate = function (template) {\n    var _this = this;\n\n    template = this.validateInputRemoteConfigTemplate(template);\n    return this.sendPutRequest(template, template.etag, true).then(function (resp) {\n      // validating a template returns an etag with the suffix -0 means that your update \n      // was successfully validated. We set the etag back to the original etag of the template\n      // to allow future operations.\n      _this.validateEtag(resp.headers['etag']);\n\n      return _this.toRemoteConfigTemplate(resp, template.etag);\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.publishTemplate = function (template, options) {\n    var _this = this;\n\n    template = this.validateInputRemoteConfigTemplate(template);\n    var ifMatch = template.etag;\n\n    if (options && options.force == true) {\n      // setting `If-Match: *` forces the Remote Config template to be updated\n      // and circumvent the ETag, and the protection from that it provides.\n      ifMatch = '*';\n    }\n\n    return this.sendPutRequest(template, ifMatch).then(function (resp) {\n      return _this.toRemoteConfigTemplate(resp);\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.rollback = function (versionNumber) {\n    var _this = this;\n\n    var data = {\n      versionNumber: this.validateVersionNumber(versionNumber)\n    };\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'POST',\n        url: url + \"/remoteConfig:rollback\",\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data: data\n      };\n      return _this.httpClient.send(request);\n    }).then(function (resp) {\n      return _this.toRemoteConfigTemplate(resp);\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.listVersions = function (options) {\n    var _this = this;\n\n    if (typeof options !== 'undefined') {\n      options = this.validateListVersionsOptions(options);\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/remoteConfig:listVersions\",\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data: options\n      };\n      return _this.httpClient.send(request);\n    }).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.sendPutRequest = function (template, etag, validateOnly) {\n    var _this = this;\n\n    var path = 'remoteConfig';\n\n    if (validateOnly) {\n      path += '?validate_only=true';\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'PUT',\n        url: url + \"/\" + path,\n        headers: __assign(__assign({}, FIREBASE_REMOTE_CONFIG_HEADERS), {\n          'If-Match': etag\n        }),\n        data: {\n          conditions: template.conditions,\n          parameters: template.parameters,\n          parameterGroups: template.parameterGroups,\n          version: template.version\n        }\n      };\n      return _this.httpClient.send(request);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.getUrl = function () {\n    return this.getProjectIdPrefix().then(function (projectIdPrefix) {\n      return FIREBASE_REMOTE_CONFIG_V1_API + \"/\" + projectIdPrefix;\n    });\n  };\n\n  RemoteConfigApiClient.prototype.getProjectIdPrefix = function () {\n    var _this = this;\n\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectIdPrefix = \"projects/\" + projectId;\n      return _this.projectIdPrefix;\n    });\n  };\n\n  RemoteConfigApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = 'unknown-error';\n\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new remote_config_utils_1.FirebaseRemoteConfigError(code, message);\n  };\n  /**\n   * Creates a RemoteConfigTemplate from the API response.\n   * If provided, customEtag is used instead of the etag returned in the API response.\n   *\n   * @param {HttpResponse} resp API response object.\n   * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\n   */\n\n\n  RemoteConfigApiClient.prototype.toRemoteConfigTemplate = function (resp, customEtag) {\n    var etag = typeof customEtag == 'undefined' ? resp.headers['etag'] : customEtag;\n    this.validateEtag(etag);\n    return {\n      conditions: resp.data.conditions,\n      parameters: resp.data.parameters,\n      parameterGroups: resp.data.parameterGroups,\n      etag: etag,\n      version: resp.data.version\n    };\n  };\n  /**\n   * Checks if the given RemoteConfigTemplate object is valid.\n   * The object must have valid parameters, parameter groups, conditions, and an etag.\n   * Removes output only properties from version metadata.\n   *\n   * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\n   *\n   * @returns {RemoteConfigTemplate} The validated RemoteConfigTemplate object.\n   */\n\n\n  RemoteConfigApiClient.prototype.validateInputRemoteConfigTemplate = function (template) {\n    var templateCopy = deep_copy_1.deepCopy(template);\n\n    if (!validator.isNonNullObject(templateCopy)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(templateCopy));\n    }\n\n    if (!validator.isNonEmptyString(templateCopy.etag)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n    }\n\n    if (!validator.isNonNullObject(templateCopy.parameters)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n    }\n\n    if (!validator.isNonNullObject(templateCopy.parameterGroups)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n    }\n\n    if (!validator.isArray(templateCopy.conditions)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n    }\n\n    if (typeof templateCopy.version !== 'undefined') {\n      // exclude output only properties and keep the only input property: description\n      templateCopy.version = {\n        description: templateCopy.version.description\n      };\n    }\n\n    return templateCopy;\n  };\n  /**\n   * Checks if a given version number is valid.\n   * A version number must be an integer or a string in int64 format.\n   * If valid, returns the string representation of the provided version number.\n   *\n   * @param {string|number} versionNumber A version number to be validated.\n   *\n   * @returns {string} The validated version number as a string.\n   */\n\n\n  RemoteConfigApiClient.prototype.validateVersionNumber = function (versionNumber, propertyName) {\n    if (propertyName === void 0) {\n      propertyName = 'versionNumber';\n    }\n\n    if (!validator.isNonEmptyString(versionNumber) && !validator.isNumber(versionNumber)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', propertyName + \" must be a non-empty string in int64 format or a number\");\n    }\n\n    if (!Number.isInteger(Number(versionNumber))) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', propertyName + \" must be an integer or a string in int64 format\");\n    }\n\n    return versionNumber.toString();\n  };\n\n  RemoteConfigApiClient.prototype.validateEtag = function (etag) {\n    if (!validator.isNonEmptyString(etag)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n    }\n  };\n  /**\n   * Checks if a given `ListVersionsOptions` object is valid. If successful, creates a copy of the\n   * options object and convert `startTime` and `endTime` to RFC3339 UTC \"Zulu\" format, if present.\n   *\n   * @param {ListVersionsOptions} options An options object to be validated.\n   *\n   * @return {ListVersionsOptions} A copy of the provided options object with timestamps converted\n   * to UTC Zulu format.\n   */\n\n\n  RemoteConfigApiClient.prototype.validateListVersionsOptions = function (options) {\n    var optionsCopy = deep_copy_1.deepCopy(options);\n\n    if (!validator.isNonNullObject(optionsCopy)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ListVersionsOptions must be a non-null object.');\n    }\n\n    if (typeof optionsCopy.pageSize !== 'undefined') {\n      if (!validator.isNumber(optionsCopy.pageSize)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number.');\n      }\n\n      if (optionsCopy.pageSize < 1 || optionsCopy.pageSize > 300) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number between 1 and 300 (inclusive).');\n      }\n    }\n\n    if (typeof optionsCopy.pageToken !== 'undefined' && !validator.isNonEmptyString(optionsCopy.pageToken)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'pageToken must be a string value.');\n    }\n\n    if (typeof optionsCopy.endVersionNumber !== 'undefined') {\n      optionsCopy.endVersionNumber = this.validateVersionNumber(optionsCopy.endVersionNumber, 'endVersionNumber');\n    }\n\n    if (typeof optionsCopy.startTime !== 'undefined') {\n      if (!(optionsCopy.startTime instanceof Date) && !validator.isUTCDateString(optionsCopy.startTime)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'startTime must be a valid Date object or a UTC date string.');\n      } // Convert startTime to RFC3339 UTC \"Zulu\" format.\n\n\n      if (optionsCopy.startTime instanceof Date) {\n        optionsCopy.startTime = optionsCopy.startTime.toISOString();\n      } else {\n        optionsCopy.startTime = new Date(optionsCopy.startTime).toISOString();\n      }\n    }\n\n    if (typeof optionsCopy.endTime !== 'undefined') {\n      if (!(optionsCopy.endTime instanceof Date) && !validator.isUTCDateString(optionsCopy.endTime)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'endTime must be a valid Date object or a UTC date string.');\n      } // Convert endTime to RFC3339 UTC \"Zulu\" format.\n\n\n      if (optionsCopy.endTime instanceof Date) {\n        optionsCopy.endTime = optionsCopy.endTime.toISOString();\n      } else {\n        optionsCopy.endTime = new Date(optionsCopy.endTime).toISOString();\n      }\n    } // Remove undefined fields from optionsCopy\n\n\n    Object.keys(optionsCopy).forEach(function (key) {\n      return typeof optionsCopy[key] === 'undefined' && delete optionsCopy[key];\n    });\n    return optionsCopy;\n  };\n\n  return RemoteConfigApiClient;\n}();\n\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nvar ERROR_CODE_MAPPING = {\n  ABORTED: 'aborted',\n  ALREADY_EXISTS: \"already-exists\",\n  INVALID_ARGUMENT: 'invalid-argument',\n  INTERNAL: 'internal-error',\n  FAILED_PRECONDITION: 'failed-precondition',\n  NOT_FOUND: 'not-found',\n  OUT_OF_RANGE: 'out-of-range',\n  PERMISSION_DENIED: 'permission-denied',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNKNOWN: 'unknown-error'\n};","map":{"version":3,"sources":["/Users/johnyoo/Desktop/OtterSpace/node_modules/firebase-admin/lib/remote-config/remote-config-api-client.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","RemoteConfigApiClient","TagColor","api_request_1","require","error_1","remote_config_utils_1","utils","validator","deep_copy_1","FIREBASE_REMOTE_CONFIG_V1_API","FIREBASE_REMOTE_CONFIG_HEADERS","app","isNonNullObject","FirebaseRemoteConfigError","httpClient","AuthorizedHttpClient","getTemplate","_this","getUrl","then","url","request","method","headers","send","resp","toRemoteConfigTemplate","catch","err","toFirebaseError","getTemplateAtVersion","versionNumber","data","validateVersionNumber","validateTemplate","template","validateInputRemoteConfigTemplate","sendPutRequest","etag","validateEtag","publishTemplate","options","ifMatch","force","rollback","listVersions","validateListVersionsOptions","validateOnly","path","conditions","parameters","parameterGroups","version","getProjectIdPrefix","projectIdPrefix","Promise","resolve","findProjectId","projectId","isNonEmptyString","PrefixedFirebaseError","response","isJson","status","text","error","code","ERROR_CODE_MAPPING","message","customEtag","templateCopy","deepCopy","JSON","stringify","isArray","description","propertyName","isNumber","Number","isInteger","toString","optionsCopy","pageSize","pageToken","endVersionNumber","startTime","Date","isUTCDateString","toISOString","endTime","keys","forEach","key","ABORTED","ALREADY_EXISTS","INVALID_ARGUMENT","INTERNAL","FAILED_PRECONDITION","NOT_FOUND","OUT_OF_RANGE","PERMISSION_DENIED","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;AAeA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWAN,MAAM,CAACa,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,QAAR,GAAmB,KAAK,CAAxD;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA3B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIK,WAAW,GAAGL,OAAO,CAAC,oBAAD,CAAzB,C,CACA;;;AACA,IAAIM,6BAA6B,GAAG,gDAApC;AACA,IAAIC,8BAA8B,GAAG;AACjC,uBAAqB,uBADY;AAEjC;AACA;AACA;AACA;AACA,qBAAmB;AANc,CAArC;AAQA,IAAIT,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;AACjBA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACAA,EAAAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;AACAA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACAA,EAAAA,QAAQ,CAAC,aAAD,CAAR,GAA0B,YAA1B;AACAA,EAAAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;AACAA,EAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,QAArB;AACAA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACAA,EAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,QAArB;AACAA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACAA,EAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,QAArB;AACAA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACH,CAZD,EAYGA,QAAQ,GAAGH,OAAO,CAACG,QAAR,KAAqBH,OAAO,CAACG,QAAR,GAAmB,EAAxC,CAZd;AAaA;;;;;;;AAKA,IAAID,qBAAqB;AAAG;AAAe,YAAY;AACnD,WAASA,qBAAT,CAA+BW,GAA/B,EAAoC;AAChC,SAAKA,GAAL,GAAWA,GAAX;;AACA,QAAI,CAACJ,SAAS,CAACK,eAAV,CAA0BD,GAA1B,CAAD,IAAmC,EAAE,aAAaA,GAAf,CAAvC,EAA4D;AACxD,YAAM,IAAIN,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,sFAAxE,CAAN;AACH;;AACD,SAAKC,UAAL,GAAkB,IAAIZ,aAAa,CAACa,oBAAlB,CAAuCJ,GAAvC,CAAlB;AACH;;AACDX,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCuB,WAAhC,GAA8C,YAAY;AACtD,QAAIC,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKC,MAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,KADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,eAFD;AAGVG,QAAAA,OAAO,EAAEb;AAHC,OAAd;AAKA,aAAOO,KAAK,CAACH,UAAN,CAAiBU,IAAjB,CAAsBH,OAAtB,CAAP;AACH,KARM,EASFF,IATE,CASG,UAAUM,IAAV,EAAgB;AACtB,aAAOR,KAAK,CAACS,sBAAN,CAA6BD,IAA7B,CAAP;AACH,KAXM,EAYFE,KAZE,CAYI,UAAUC,GAAV,EAAe;AACtB,YAAMX,KAAK,CAACY,eAAN,CAAsBD,GAAtB,CAAN;AACH,KAdM,CAAP;AAeH,GAjBD;;AAkBA5B,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCqC,oBAAhC,GAAuD,UAAUC,aAAV,EAAyB;AAC5E,QAAId,KAAK,GAAG,IAAZ;;AACA,QAAIe,IAAI,GAAG;AAAED,MAAAA,aAAa,EAAE,KAAKE,qBAAL,CAA2BF,aAA3B;AAAjB,KAAX;AACA,WAAO,KAAKb,MAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,KADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,eAFD;AAGVG,QAAAA,OAAO,EAAEb,8BAHC;AAIVsB,QAAAA,IAAI,EAAEA;AAJI,OAAd;AAMA,aAAOf,KAAK,CAACH,UAAN,CAAiBU,IAAjB,CAAsBH,OAAtB,CAAP;AACH,KATM,EAUFF,IAVE,CAUG,UAAUM,IAAV,EAAgB;AACtB,aAAOR,KAAK,CAACS,sBAAN,CAA6BD,IAA7B,CAAP;AACH,KAZM,EAaFE,KAbE,CAaI,UAAUC,GAAV,EAAe;AACtB,YAAMX,KAAK,CAACY,eAAN,CAAsBD,GAAtB,CAAN;AACH,KAfM,CAAP;AAgBH,GAnBD;;AAoBA5B,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCyC,gBAAhC,GAAmD,UAAUC,QAAV,EAAoB;AACnE,QAAIlB,KAAK,GAAG,IAAZ;;AACAkB,IAAAA,QAAQ,GAAG,KAAKC,iCAAL,CAAuCD,QAAvC,CAAX;AACA,WAAO,KAAKE,cAAL,CAAoBF,QAApB,EAA8BA,QAAQ,CAACG,IAAvC,EAA6C,IAA7C,EACFnB,IADE,CACG,UAAUM,IAAV,EAAgB;AACtB;AACA;AACA;AACAR,MAAAA,KAAK,CAACsB,YAAN,CAAmBd,IAAI,CAACF,OAAL,CAAa,MAAb,CAAnB;;AACA,aAAON,KAAK,CAACS,sBAAN,CAA6BD,IAA7B,EAAmCU,QAAQ,CAACG,IAA5C,CAAP;AACH,KAPM,EAQFX,KARE,CAQI,UAAUC,GAAV,EAAe;AACtB,YAAMX,KAAK,CAACY,eAAN,CAAsBD,GAAtB,CAAN;AACH,KAVM,CAAP;AAWH,GAdD;;AAeA5B,EAAAA,qBAAqB,CAACP,SAAtB,CAAgC+C,eAAhC,GAAkD,UAAUL,QAAV,EAAoBM,OAApB,EAA6B;AAC3E,QAAIxB,KAAK,GAAG,IAAZ;;AACAkB,IAAAA,QAAQ,GAAG,KAAKC,iCAAL,CAAuCD,QAAvC,CAAX;AACA,QAAIO,OAAO,GAAGP,QAAQ,CAACG,IAAvB;;AACA,QAAIG,OAAO,IAAIA,OAAO,CAACE,KAAR,IAAiB,IAAhC,EAAsC;AAClC;AACA;AACAD,MAAAA,OAAO,GAAG,GAAV;AACH;;AACD,WAAO,KAAKL,cAAL,CAAoBF,QAApB,EAA8BO,OAA9B,EACFvB,IADE,CACG,UAAUM,IAAV,EAAgB;AACtB,aAAOR,KAAK,CAACS,sBAAN,CAA6BD,IAA7B,CAAP;AACH,KAHM,EAIFE,KAJE,CAII,UAAUC,GAAV,EAAe;AACtB,YAAMX,KAAK,CAACY,eAAN,CAAsBD,GAAtB,CAAN;AACH,KANM,CAAP;AAOH,GAhBD;;AAiBA5B,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCmD,QAAhC,GAA2C,UAAUb,aAAV,EAAyB;AAChE,QAAId,KAAK,GAAG,IAAZ;;AACA,QAAIe,IAAI,GAAG;AAAED,MAAAA,aAAa,EAAE,KAAKE,qBAAL,CAA2BF,aAA3B;AAAjB,KAAX;AACA,WAAO,KAAKb,MAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,MADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,wBAFD;AAGVG,QAAAA,OAAO,EAAEb,8BAHC;AAIVsB,QAAAA,IAAI,EAAEA;AAJI,OAAd;AAMA,aAAOf,KAAK,CAACH,UAAN,CAAiBU,IAAjB,CAAsBH,OAAtB,CAAP;AACH,KATM,EAUFF,IAVE,CAUG,UAAUM,IAAV,EAAgB;AACtB,aAAOR,KAAK,CAACS,sBAAN,CAA6BD,IAA7B,CAAP;AACH,KAZM,EAaFE,KAbE,CAaI,UAAUC,GAAV,EAAe;AACtB,YAAMX,KAAK,CAACY,eAAN,CAAsBD,GAAtB,CAAN;AACH,KAfM,CAAP;AAgBH,GAnBD;;AAoBA5B,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCoD,YAAhC,GAA+C,UAAUJ,OAAV,EAAmB;AAC9D,QAAIxB,KAAK,GAAG,IAAZ;;AACA,QAAI,OAAOwB,OAAP,KAAmB,WAAvB,EAAoC;AAChCA,MAAAA,OAAO,GAAG,KAAKK,2BAAL,CAAiCL,OAAjC,CAAV;AACH;;AACD,WAAO,KAAKvB,MAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,KADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,4BAFD;AAGVG,QAAAA,OAAO,EAAEb,8BAHC;AAIVsB,QAAAA,IAAI,EAAES;AAJI,OAAd;AAMA,aAAOxB,KAAK,CAACH,UAAN,CAAiBU,IAAjB,CAAsBH,OAAtB,CAAP;AACH,KATM,EAUFF,IAVE,CAUG,UAAUM,IAAV,EAAgB;AACtB,aAAOA,IAAI,CAACO,IAAZ;AACH,KAZM,EAaFL,KAbE,CAaI,UAAUC,GAAV,EAAe;AACtB,YAAMX,KAAK,CAACY,eAAN,CAAsBD,GAAtB,CAAN;AACH,KAfM,CAAP;AAgBH,GArBD;;AAsBA5B,EAAAA,qBAAqB,CAACP,SAAtB,CAAgC4C,cAAhC,GAAiD,UAAUF,QAAV,EAAoBG,IAApB,EAA0BS,YAA1B,EAAwC;AACrF,QAAI9B,KAAK,GAAG,IAAZ;;AACA,QAAI+B,IAAI,GAAG,cAAX;;AACA,QAAID,YAAJ,EAAkB;AACdC,MAAAA,IAAI,IAAI,qBAAR;AACH;;AACD,WAAO,KAAK9B,MAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,KADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,GAAN,GAAY4B,IAFP;AAGVzB,QAAAA,OAAO,EAAExC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK2B,8BAAL,CAAT,EAA+C;AAAE,sBAAY4B;AAAd,SAA/C,CAHP;AAIVN,QAAAA,IAAI,EAAE;AACFiB,UAAAA,UAAU,EAAEd,QAAQ,CAACc,UADnB;AAEFC,UAAAA,UAAU,EAAEf,QAAQ,CAACe,UAFnB;AAGFC,UAAAA,eAAe,EAAEhB,QAAQ,CAACgB,eAHxB;AAIFC,UAAAA,OAAO,EAAEjB,QAAQ,CAACiB;AAJhB;AAJI,OAAd;AAWA,aAAOnC,KAAK,CAACH,UAAN,CAAiBU,IAAjB,CAAsBH,OAAtB,CAAP;AACH,KAdM,CAAP;AAeH,GArBD;;AAsBArB,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCyB,MAAhC,GAAyC,YAAY;AACjD,WAAO,KAAKmC,kBAAL,GACFlC,IADE,CACG,UAAUmC,eAAV,EAA2B;AACjC,aAAO7C,6BAA6B,GAAG,GAAhC,GAAsC6C,eAA7C;AACH,KAHM,CAAP;AAIH,GALD;;AAMAtD,EAAAA,qBAAqB,CAACP,SAAtB,CAAgC4D,kBAAhC,GAAqD,YAAY;AAC7D,QAAIpC,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKqC,eAAT,EAA0B;AACtB,aAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKF,eAArB,CAAP;AACH;;AACD,WAAOhD,KAAK,CAACmD,aAAN,CAAoB,KAAK9C,GAAzB,EACFQ,IADE,CACG,UAAUuC,SAAV,EAAqB;AAC3B,UAAI,CAACnD,SAAS,CAACoD,gBAAV,CAA2BD,SAA3B,CAAL,EAA4C;AACxC,cAAM,IAAIrD,qBAAqB,CAACQ,yBAA1B,CAAoD,eAApD,EAAqE,6FACrE,+EADqE,GAErE,uBAFA,CAAN;AAGH;;AACDI,MAAAA,KAAK,CAACqC,eAAN,GAAwB,cAAcI,SAAtC;AACA,aAAOzC,KAAK,CAACqC,eAAb;AACH,KATM,CAAP;AAUH,GAfD;;AAgBAtD,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCoC,eAAhC,GAAkD,UAAUD,GAAV,EAAe;AAC7D,QAAIA,GAAG,YAAYxB,OAAO,CAACwD,qBAA3B,EAAkD;AAC9C,aAAOhC,GAAP;AACH;;AACD,QAAIiC,QAAQ,GAAGjC,GAAG,CAACiC,QAAnB;;AACA,QAAI,CAACA,QAAQ,CAACC,MAAT,EAAL,EAAwB;AACpB,aAAO,IAAIzD,qBAAqB,CAACQ,yBAA1B,CAAoD,eAApD,EAAqE,sCAAsCgD,QAAQ,CAACE,MAA/C,GAAwD,aAAxD,GAAwEF,QAAQ,CAACG,IAAtJ,CAAP;AACH;;AACD,QAAIC,KAAK,GAAGJ,QAAQ,CAAC7B,IAAT,CAAciC,KAAd,IAAuB,EAAnC;AACA,QAAIC,IAAI,GAAG,eAAX;;AACA,QAAID,KAAK,CAACF,MAAN,IAAgBE,KAAK,CAACF,MAAN,IAAgBI,kBAApC,EAAwD;AACpDD,MAAAA,IAAI,GAAGC,kBAAkB,CAACF,KAAK,CAACF,MAAP,CAAzB;AACH;;AACD,QAAIK,OAAO,GAAGH,KAAK,CAACG,OAAN,IAAiB,2BAA2BP,QAAQ,CAACG,IAAnE;AACA,WAAO,IAAI3D,qBAAqB,CAACQ,yBAA1B,CAAoDqD,IAApD,EAA0DE,OAA1D,CAAP;AACH,GAfD;AAgBA;;;;;;;;;AAOApE,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCiC,sBAAhC,GAAyD,UAAUD,IAAV,EAAgB4C,UAAhB,EAA4B;AACjF,QAAI/B,IAAI,GAAI,OAAO+B,UAAP,IAAqB,WAAtB,GAAqC5C,IAAI,CAACF,OAAL,CAAa,MAAb,CAArC,GAA4D8C,UAAvE;AACA,SAAK9B,YAAL,CAAkBD,IAAlB;AACA,WAAO;AACHW,MAAAA,UAAU,EAAExB,IAAI,CAACO,IAAL,CAAUiB,UADnB;AAEHC,MAAAA,UAAU,EAAEzB,IAAI,CAACO,IAAL,CAAUkB,UAFnB;AAGHC,MAAAA,eAAe,EAAE1B,IAAI,CAACO,IAAL,CAAUmB,eAHxB;AAIHb,MAAAA,IAAI,EAAEA,IAJH;AAKHc,MAAAA,OAAO,EAAE3B,IAAI,CAACO,IAAL,CAAUoB;AALhB,KAAP;AAOH,GAVD;AAWA;;;;;;;;;;;AASApD,EAAAA,qBAAqB,CAACP,SAAtB,CAAgC2C,iCAAhC,GAAoE,UAAUD,QAAV,EAAoB;AACpF,QAAImC,YAAY,GAAG9D,WAAW,CAAC+D,QAAZ,CAAqBpC,QAArB,CAAnB;;AACA,QAAI,CAAC5B,SAAS,CAACK,eAAV,CAA0B0D,YAA1B,CAAL,EAA8C;AAC1C,YAAM,IAAIjE,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,qCAAqC2D,IAAI,CAACC,SAAL,CAAeH,YAAf,CAA7G,CAAN;AACH;;AACD,QAAI,CAAC/D,SAAS,CAACoD,gBAAV,CAA2BW,YAAY,CAAChC,IAAxC,CAAL,EAAoD;AAChD,YAAM,IAAIjC,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,kCAAxE,CAAN;AACH;;AACD,QAAI,CAACN,SAAS,CAACK,eAAV,CAA0B0D,YAAY,CAACpB,UAAvC,CAAL,EAAyD;AACrD,YAAM,IAAI7C,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,oDAAxE,CAAN;AACH;;AACD,QAAI,CAACN,SAAS,CAACK,eAAV,CAA0B0D,YAAY,CAACnB,eAAvC,CAAL,EAA8D;AAC1D,YAAM,IAAI9C,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,0DAAxE,CAAN;AACH;;AACD,QAAI,CAACN,SAAS,CAACmE,OAAV,CAAkBJ,YAAY,CAACrB,UAA/B,CAAL,EAAiD;AAC7C,YAAM,IAAI5C,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,2CAAxE,CAAN;AACH;;AACD,QAAI,OAAOyD,YAAY,CAAClB,OAApB,KAAgC,WAApC,EAAiD;AAC7C;AACAkB,MAAAA,YAAY,CAAClB,OAAb,GAAuB;AAAEuB,QAAAA,WAAW,EAAEL,YAAY,CAAClB,OAAb,CAAqBuB;AAApC,OAAvB;AACH;;AACD,WAAOL,YAAP;AACH,GAtBD;AAuBA;;;;;;;;;;;AASAtE,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCwC,qBAAhC,GAAwD,UAAUF,aAAV,EAAyB6C,YAAzB,EAAuC;AAC3F,QAAIA,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,MAAAA,YAAY,GAAG,eAAf;AAAiC;;AAChE,QAAI,CAACrE,SAAS,CAACoD,gBAAV,CAA2B5B,aAA3B,CAAD,IACA,CAACxB,SAAS,CAACsE,QAAV,CAAmB9C,aAAnB,CADL,EACwC;AACpC,YAAM,IAAI1B,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE+D,YAAY,GAAG,yDAAvF,CAAN;AACH;;AACD,QAAI,CAACE,MAAM,CAACC,SAAP,CAAiBD,MAAM,CAAC/C,aAAD,CAAvB,CAAL,EAA8C;AAC1C,YAAM,IAAI1B,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE+D,YAAY,GAAG,iDAAvF,CAAN;AACH;;AACD,WAAO7C,aAAa,CAACiD,QAAd,EAAP;AACH,GAVD;;AAWAhF,EAAAA,qBAAqB,CAACP,SAAtB,CAAgC8C,YAAhC,GAA+C,UAAUD,IAAV,EAAgB;AAC3D,QAAI,CAAC/B,SAAS,CAACoD,gBAAV,CAA2BrB,IAA3B,CAAL,EAAuC;AACnC,YAAM,IAAIjC,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,oDAAxE,CAAN;AACH;AACJ,GAJD;AAKA;;;;;;;;;;;AASAb,EAAAA,qBAAqB,CAACP,SAAtB,CAAgCqD,2BAAhC,GAA8D,UAAUL,OAAV,EAAmB;AAC7E,QAAIwC,WAAW,GAAGzE,WAAW,CAAC+D,QAAZ,CAAqB9B,OAArB,CAAlB;;AACA,QAAI,CAAClC,SAAS,CAACK,eAAV,CAA0BqE,WAA1B,CAAL,EAA6C;AACzC,YAAM,IAAI5E,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,gDAAxE,CAAN;AACH;;AACD,QAAI,OAAOoE,WAAW,CAACC,QAAnB,KAAgC,WAApC,EAAiD;AAC7C,UAAI,CAAC3E,SAAS,CAACsE,QAAV,CAAmBI,WAAW,CAACC,QAA/B,CAAL,EAA+C;AAC3C,cAAM,IAAI7E,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,4BAAxE,CAAN;AACH;;AACD,UAAIoE,WAAW,CAACC,QAAZ,GAAuB,CAAvB,IAA4BD,WAAW,CAACC,QAAZ,GAAuB,GAAvD,EAA4D;AACxD,cAAM,IAAI7E,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,0DAAxE,CAAN;AACH;AACJ;;AACD,QAAI,OAAOoE,WAAW,CAACE,SAAnB,KAAiC,WAAjC,IAAgD,CAAC5E,SAAS,CAACoD,gBAAV,CAA2BsB,WAAW,CAACE,SAAvC,CAArD,EAAwG;AACpG,YAAM,IAAI9E,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,mCAAxE,CAAN;AACH;;AACD,QAAI,OAAOoE,WAAW,CAACG,gBAAnB,KAAwC,WAA5C,EAAyD;AACrDH,MAAAA,WAAW,CAACG,gBAAZ,GAA+B,KAAKnD,qBAAL,CAA2BgD,WAAW,CAACG,gBAAvC,EAAyD,kBAAzD,CAA/B;AACH;;AACD,QAAI,OAAOH,WAAW,CAACI,SAAnB,KAAiC,WAArC,EAAkD;AAC9C,UAAI,EAAEJ,WAAW,CAACI,SAAZ,YAAiCC,IAAnC,KAA4C,CAAC/E,SAAS,CAACgF,eAAV,CAA0BN,WAAW,CAACI,SAAtC,CAAjD,EAAmG;AAC/F,cAAM,IAAIhF,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,6DAAxE,CAAN;AACH,OAH6C,CAI9C;;;AACA,UAAIoE,WAAW,CAACI,SAAZ,YAAiCC,IAArC,EAA2C;AACvCL,QAAAA,WAAW,CAACI,SAAZ,GAAwBJ,WAAW,CAACI,SAAZ,CAAsBG,WAAtB,EAAxB;AACH,OAFD,MAGK;AACDP,QAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAIC,IAAJ,CAASL,WAAW,CAACI,SAArB,EAAgCG,WAAhC,EAAxB;AACH;AACJ;;AACD,QAAI,OAAOP,WAAW,CAACQ,OAAnB,KAA+B,WAAnC,EAAgD;AAC5C,UAAI,EAAER,WAAW,CAACQ,OAAZ,YAA+BH,IAAjC,KAA0C,CAAC/E,SAAS,CAACgF,eAAV,CAA0BN,WAAW,CAACQ,OAAtC,CAA/C,EAA+F;AAC3F,cAAM,IAAIpF,qBAAqB,CAACQ,yBAA1B,CAAoD,kBAApD,EAAwE,2DAAxE,CAAN;AACH,OAH2C,CAI5C;;;AACA,UAAIoE,WAAW,CAACQ,OAAZ,YAA+BH,IAAnC,EAAyC;AACrCL,QAAAA,WAAW,CAACQ,OAAZ,GAAsBR,WAAW,CAACQ,OAAZ,CAAoBD,WAApB,EAAtB;AACH,OAFD,MAGK;AACDP,QAAAA,WAAW,CAACQ,OAAZ,GAAsB,IAAIH,IAAJ,CAASL,WAAW,CAACQ,OAArB,EAA8BD,WAA9B,EAAtB;AACH;AACJ,KA1C4E,CA2C7E;;;AACAxG,IAAAA,MAAM,CAAC0G,IAAP,CAAYT,WAAZ,EAAyBU,OAAzB,CAAiC,UAAUC,GAAV,EAAe;AAC5C,aAAQ,OAAOX,WAAW,CAACW,GAAD,CAAlB,KAA4B,WAA7B,IAA6C,OAAOX,WAAW,CAACW,GAAD,CAAtE;AACH,KAFD;AAGA,WAAOX,WAAP;AACH,GAhDD;;AAiDA,SAAOjF,qBAAP;AACH,CA1T0C,EAA3C;;AA2TAF,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;AACA,IAAImE,kBAAkB,GAAG;AACrB0B,EAAAA,OAAO,EAAE,SADY;AAErBC,EAAAA,cAAc,EAAE,gBAFK;AAGrBC,EAAAA,gBAAgB,EAAE,kBAHG;AAIrBC,EAAAA,QAAQ,EAAE,gBAJW;AAKrBC,EAAAA,mBAAmB,EAAE,qBALA;AAMrBC,EAAAA,SAAS,EAAE,WANU;AAOrBC,EAAAA,YAAY,EAAE,cAPO;AAQrBC,EAAAA,iBAAiB,EAAE,mBARE;AASrBC,EAAAA,kBAAkB,EAAE,oBATC;AAUrBC,EAAAA,eAAe,EAAE,iBAVI;AAWrBC,EAAAA,OAAO,EAAE;AAXY,CAAzB","sourcesContent":["/*! firebase-admin v9.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteConfigApiClient = exports.TagColor = void 0;\nvar api_request_1 = require(\"../utils/api-request\");\nvar error_1 = require(\"../utils/error\");\nvar remote_config_utils_1 = require(\"./remote-config-utils\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n// Remote Config backend constants\nvar FIREBASE_REMOTE_CONFIG_V1_API = 'https://firebaseremoteconfig.googleapis.com/v1';\nvar FIREBASE_REMOTE_CONFIG_HEADERS = {\n    'X-Firebase-Client': 'fire-admin-node/9.0.0',\n    // There is a known issue in which the ETag is not properly returned in cases where the request\n    // does not specify a compression type. Currently, it is required to include the header\n    // `Accept-Encoding: gzip` or equivalent in all requests.\n    // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n    'Accept-Encoding': 'gzip',\n};\nvar TagColor;\n(function (TagColor) {\n    TagColor[\"BLUE\"] = \"Blue\";\n    TagColor[\"BROWN\"] = \"Brown\";\n    TagColor[\"CYAN\"] = \"Cyan\";\n    TagColor[\"DEEP_ORANGE\"] = \"Red Orange\";\n    TagColor[\"GREEN\"] = \"Green\";\n    TagColor[\"INDIGO\"] = \"Indigo\";\n    TagColor[\"LIME\"] = \"Lime\";\n    TagColor[\"ORANGE\"] = \"Orange\";\n    TagColor[\"PINK\"] = \"Pink\";\n    TagColor[\"PURPLE\"] = \"Purple\";\n    TagColor[\"TEAL\"] = \"Teal\";\n})(TagColor = exports.TagColor || (exports.TagColor = {}));\n/**\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\n *\n * @private\n */\nvar RemoteConfigApiClient = /** @class */ (function () {\n    function RemoteConfigApiClient(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    RemoteConfigApiClient.prototype.getTemplate = function () {\n        var _this = this;\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/remoteConfig\",\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS\n            };\n            return _this.httpClient.send(request);\n        })\n            .then(function (resp) {\n            return _this.toRemoteConfigTemplate(resp);\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.getTemplateAtVersion = function (versionNumber) {\n        var _this = this;\n        var data = { versionNumber: this.validateVersionNumber(versionNumber) };\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/remoteConfig\",\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data: data\n            };\n            return _this.httpClient.send(request);\n        })\n            .then(function (resp) {\n            return _this.toRemoteConfigTemplate(resp);\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.validateTemplate = function (template) {\n        var _this = this;\n        template = this.validateInputRemoteConfigTemplate(template);\n        return this.sendPutRequest(template, template.etag, true)\n            .then(function (resp) {\n            // validating a template returns an etag with the suffix -0 means that your update \n            // was successfully validated. We set the etag back to the original etag of the template\n            // to allow future operations.\n            _this.validateEtag(resp.headers['etag']);\n            return _this.toRemoteConfigTemplate(resp, template.etag);\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.publishTemplate = function (template, options) {\n        var _this = this;\n        template = this.validateInputRemoteConfigTemplate(template);\n        var ifMatch = template.etag;\n        if (options && options.force == true) {\n            // setting `If-Match: *` forces the Remote Config template to be updated\n            // and circumvent the ETag, and the protection from that it provides.\n            ifMatch = '*';\n        }\n        return this.sendPutRequest(template, ifMatch)\n            .then(function (resp) {\n            return _this.toRemoteConfigTemplate(resp);\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.rollback = function (versionNumber) {\n        var _this = this;\n        var data = { versionNumber: this.validateVersionNumber(versionNumber) };\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'POST',\n                url: url + \"/remoteConfig:rollback\",\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data: data\n            };\n            return _this.httpClient.send(request);\n        })\n            .then(function (resp) {\n            return _this.toRemoteConfigTemplate(resp);\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.listVersions = function (options) {\n        var _this = this;\n        if (typeof options !== 'undefined') {\n            options = this.validateListVersionsOptions(options);\n        }\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/remoteConfig:listVersions\",\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data: options\n            };\n            return _this.httpClient.send(request);\n        })\n            .then(function (resp) {\n            return resp.data;\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.sendPutRequest = function (template, etag, validateOnly) {\n        var _this = this;\n        var path = 'remoteConfig';\n        if (validateOnly) {\n            path += '?validate_only=true';\n        }\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'PUT',\n                url: url + \"/\" + path,\n                headers: __assign(__assign({}, FIREBASE_REMOTE_CONFIG_HEADERS), { 'If-Match': etag }),\n                data: {\n                    conditions: template.conditions,\n                    parameters: template.parameters,\n                    parameterGroups: template.parameterGroups,\n                    version: template.version,\n                }\n            };\n            return _this.httpClient.send(request);\n        });\n    };\n    RemoteConfigApiClient.prototype.getUrl = function () {\n        return this.getProjectIdPrefix()\n            .then(function (projectIdPrefix) {\n            return FIREBASE_REMOTE_CONFIG_V1_API + \"/\" + projectIdPrefix;\n        });\n    };\n    RemoteConfigApiClient.prototype.getProjectIdPrefix = function () {\n        var _this = this;\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then(function (projectId) {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            _this.projectIdPrefix = \"projects/\" + projectId;\n            return _this.projectIdPrefix;\n        });\n    };\n    RemoteConfigApiClient.prototype.toFirebaseError = function (err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        var response = err.response;\n        if (!response.isJson()) {\n            return new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n        }\n        var error = response.data.error || {};\n        var code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        var message = error.message || \"Unknown server error: \" + response.text;\n        return new remote_config_utils_1.FirebaseRemoteConfigError(code, message);\n    };\n    /**\n     * Creates a RemoteConfigTemplate from the API response.\n     * If provided, customEtag is used instead of the etag returned in the API response.\n     *\n     * @param {HttpResponse} resp API response object.\n     * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\n     */\n    RemoteConfigApiClient.prototype.toRemoteConfigTemplate = function (resp, customEtag) {\n        var etag = (typeof customEtag == 'undefined') ? resp.headers['etag'] : customEtag;\n        this.validateEtag(etag);\n        return {\n            conditions: resp.data.conditions,\n            parameters: resp.data.parameters,\n            parameterGroups: resp.data.parameterGroups,\n            etag: etag,\n            version: resp.data.version,\n        };\n    };\n    /**\n     * Checks if the given RemoteConfigTemplate object is valid.\n     * The object must have valid parameters, parameter groups, conditions, and an etag.\n     * Removes output only properties from version metadata.\n     *\n     * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\n     *\n     * @returns {RemoteConfigTemplate} The validated RemoteConfigTemplate object.\n     */\n    RemoteConfigApiClient.prototype.validateInputRemoteConfigTemplate = function (template) {\n        var templateCopy = deep_copy_1.deepCopy(template);\n        if (!validator.isNonNullObject(templateCopy)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(templateCopy));\n        }\n        if (!validator.isNonEmptyString(templateCopy.etag)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n        }\n        if (!validator.isNonNullObject(templateCopy.parameters)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n        }\n        if (!validator.isNonNullObject(templateCopy.parameterGroups)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n        }\n        if (!validator.isArray(templateCopy.conditions)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n        }\n        if (typeof templateCopy.version !== 'undefined') {\n            // exclude output only properties and keep the only input property: description\n            templateCopy.version = { description: templateCopy.version.description };\n        }\n        return templateCopy;\n    };\n    /**\n     * Checks if a given version number is valid.\n     * A version number must be an integer or a string in int64 format.\n     * If valid, returns the string representation of the provided version number.\n     *\n     * @param {string|number} versionNumber A version number to be validated.\n     *\n     * @returns {string} The validated version number as a string.\n     */\n    RemoteConfigApiClient.prototype.validateVersionNumber = function (versionNumber, propertyName) {\n        if (propertyName === void 0) { propertyName = 'versionNumber'; }\n        if (!validator.isNonEmptyString(versionNumber) &&\n            !validator.isNumber(versionNumber)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', propertyName + \" must be a non-empty string in int64 format or a number\");\n        }\n        if (!Number.isInteger(Number(versionNumber))) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', propertyName + \" must be an integer or a string in int64 format\");\n        }\n        return versionNumber.toString();\n    };\n    RemoteConfigApiClient.prototype.validateEtag = function (etag) {\n        if (!validator.isNonEmptyString(etag)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n        }\n    };\n    /**\n     * Checks if a given `ListVersionsOptions` object is valid. If successful, creates a copy of the\n     * options object and convert `startTime` and `endTime` to RFC3339 UTC \"Zulu\" format, if present.\n     *\n     * @param {ListVersionsOptions} options An options object to be validated.\n     *\n     * @return {ListVersionsOptions} A copy of the provided options object with timestamps converted\n     * to UTC Zulu format.\n     */\n    RemoteConfigApiClient.prototype.validateListVersionsOptions = function (options) {\n        var optionsCopy = deep_copy_1.deepCopy(options);\n        if (!validator.isNonNullObject(optionsCopy)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ListVersionsOptions must be a non-null object.');\n        }\n        if (typeof optionsCopy.pageSize !== 'undefined') {\n            if (!validator.isNumber(optionsCopy.pageSize)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number.');\n            }\n            if (optionsCopy.pageSize < 1 || optionsCopy.pageSize > 300) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number between 1 and 300 (inclusive).');\n            }\n        }\n        if (typeof optionsCopy.pageToken !== 'undefined' && !validator.isNonEmptyString(optionsCopy.pageToken)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'pageToken must be a string value.');\n        }\n        if (typeof optionsCopy.endVersionNumber !== 'undefined') {\n            optionsCopy.endVersionNumber = this.validateVersionNumber(optionsCopy.endVersionNumber, 'endVersionNumber');\n        }\n        if (typeof optionsCopy.startTime !== 'undefined') {\n            if (!(optionsCopy.startTime instanceof Date) && !validator.isUTCDateString(optionsCopy.startTime)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'startTime must be a valid Date object or a UTC date string.');\n            }\n            // Convert startTime to RFC3339 UTC \"Zulu\" format.\n            if (optionsCopy.startTime instanceof Date) {\n                optionsCopy.startTime = optionsCopy.startTime.toISOString();\n            }\n            else {\n                optionsCopy.startTime = new Date(optionsCopy.startTime).toISOString();\n            }\n        }\n        if (typeof optionsCopy.endTime !== 'undefined') {\n            if (!(optionsCopy.endTime instanceof Date) && !validator.isUTCDateString(optionsCopy.endTime)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'endTime must be a valid Date object or a UTC date string.');\n            }\n            // Convert endTime to RFC3339 UTC \"Zulu\" format.\n            if (optionsCopy.endTime instanceof Date) {\n                optionsCopy.endTime = optionsCopy.endTime.toISOString();\n            }\n            else {\n                optionsCopy.endTime = new Date(optionsCopy.endTime).toISOString();\n            }\n        }\n        // Remove undefined fields from optionsCopy\n        Object.keys(optionsCopy).forEach(function (key) {\n            return (typeof optionsCopy[key] === 'undefined') && delete optionsCopy[key];\n        });\n        return optionsCopy;\n    };\n    return RemoteConfigApiClient;\n}());\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nvar ERROR_CODE_MAPPING = {\n    ABORTED: 'aborted',\n    ALREADY_EXISTS: \"already-exists\",\n    INVALID_ARGUMENT: 'invalid-argument',\n    INTERNAL: 'internal-error',\n    FAILED_PRECONDITION: 'failed-precondition',\n    NOT_FOUND: 'not-found',\n    OUT_OF_RANGE: 'out-of-range',\n    PERMISSION_DENIED: 'permission-denied',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'unauthenticated',\n    UNKNOWN: 'unknown-error',\n};\n"]},"metadata":{},"sourceType":"script"}