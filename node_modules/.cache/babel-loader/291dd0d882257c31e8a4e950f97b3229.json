{"ast":null,"code":"import _regeneratorRuntime from\"/Users/johnyoo/Desktop/OtterSpace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/johnyoo/Desktop/OtterSpace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/johnyoo/Desktop/OtterSpace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useMemo,useContext,createContext}from\"react\";import queryString from\"query-string\";import firebase from\"./firebase\";import{useUser,createUser,updateUser}from\"./db\";import{history}from\"./router\";import PageLoader from\"./../components/PageLoader\";// Whether to merge user data from database into auth.user\nvar MERGE_DB_USER=true;var authContext=createContext();// Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\nexport function ProvideAuth(_ref){var children=_ref.children;var auth=useProvideAuth();return/*#__PURE__*/React.createElement(authContext.Provider,{value:auth},children);}// Hook that enables any component to subscribe to auth state\nexport var useAuth=function useAuth(){return useContext(authContext);};// Provider hook that creates auth object and handles state\nfunction useProvideAuth(){// Store auth user object\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];// Format final user object and merge extra data from database\nvar finalUser=usePrepareUser(user);// Handle response from authentication functions\nvar handleAuth=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(response){var user,additionalUserInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:user=response.user,additionalUserInfo=response.additionalUserInfo;// Ensure Firebase is actually ready before we continue\n_context.next=3;return waitForFirebase();case 3:if(!additionalUserInfo.isNewUser){_context.next=6;break;}_context.next=6;return createUser(user.uid,{email:user.email});case 6:// Update user in state\nsetUser(user);return _context.abrupt(\"return\",user);case 8:case\"end\":return _context.stop();}}},_callee);}));return function handleAuth(_x){return _ref2.apply(this,arguments);};}();var signup=function signup(email,password){return firebase.auth().createUserWithEmailAndPassword(email,password).then(handleAuth);};var signin=function signin(email,password){return firebase.auth().signInWithEmailAndPassword(email,password).then(handleAuth);};var signinWithProvider=function signinWithProvider(name){// Get provider data by name (\"password\", \"google\", etc)\nvar providerData=allProviders.find(function(p){return p.name===name;});var provider=new providerData.providerMethod();if(providerData.parameters){provider.setCustomParameters(providerData.parameters);}return firebase.auth().signInWithPopup(provider).then(handleAuth);};var signout=function signout(){return firebase.auth().signOut();};var sendPasswordResetEmail=function sendPasswordResetEmail(email){return firebase.auth().sendPasswordResetEmail(email);};var confirmPasswordReset=function confirmPasswordReset(password,code){// Get code from query string object\nvar resetCode=code||getFromQueryString(\"oobCode\");return firebase.auth().confirmPasswordReset(resetCode,password);};var updateEmail=function updateEmail(email){return firebase.auth().currentUser.updateEmail(email).then(function(){// Update user in state (since onAuthStateChanged doesn't get called)\nsetUser(firebase.auth().currentUser);});};var updatePassword=function updatePassword(password){return firebase.auth().currentUser.updatePassword(password);};// Update auth user and persist to database (including any custom values in data)\n// Forms can call this function instead of multiple auth/db update functions\nvar updateProfile=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data){var email,name,picture,fields;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:email=data.email,name=data.name,picture=data.picture;// Update auth email\nif(!email){_context2.next=4;break;}_context2.next=4;return firebase.auth().currentUser.updateEmail(email);case 4:if(!(name||picture)){_context2.next=10;break;}fields={};if(name)fields.displayName=name;if(picture)fields.photoURL=picture;_context2.next=10;return firebase.auth().currentUser.updateProfile(fields);case 10:_context2.next=12;return updateUser(user.uid,data);case 12:// Update user in state\nsetUser(firebase.auth().currentUser);case 13:case\"end\":return _context2.stop();}}},_callee2);}));return function updateProfile(_x2){return _ref3.apply(this,arguments);};}();useEffect(function(){// Subscribe to user on mount\nvar unsubscribe=firebase.auth().onAuthStateChanged(function(user){if(user){setUser(user);}else{setUser(false);}});// Unsubscribe on cleanup\nreturn function(){return unsubscribe();};},[]);return{user:finalUser,signup:signup,signin:signin,signinWithProvider:signinWithProvider,signout:signout,sendPasswordResetEmail:sendPasswordResetEmail,confirmPasswordReset:confirmPasswordReset,updateEmail:updateEmail,updatePassword:updatePassword,updateProfile:updateProfile};}// A Higher Order Component for requiring authentication\nexport var requireAuth=function requireAuth(Component){return function(props){// Get authenticated user\nvar auth=useAuth();useEffect(function(){// Redirect if not signed in\nif(auth.user===false){history.replace(\"/auth/signin\");}},[auth]);// Show loading indicator\n// We're either loading (user is null) or we're about to redirect (user is false)\nif(!auth.user){return/*#__PURE__*/React.createElement(PageLoader,null);}// Render component now that we have user\nreturn/*#__PURE__*/React.createElement(Component,props);};};// Format final user object and merge extra data from database\nfunction usePrepareUser(user){// Fetch extra data from database (if enabled and auth user has been fetched)\nvar userDbQuery=useUser(MERGE_DB_USER&&user&&user.uid);// Memoize so we only create a new object if user or userDbQuery changes\nreturn useMemo(function(){// Return if auth user is null (loading) or false (not authenticated)\nif(!user)return user;// Data we want to include from auth user object\nvar finalUser={uid:user.uid,email:user.email,name:user.displayName,picture:user.photoURL};// Include an array of user's auth providers, such as [\"password\", \"google\", etc]\n// Components can read this to prompt user to re-auth with the correct provider\nfinalUser.providers=user.providerData.map(function(_ref4){var providerId=_ref4.providerId;return allProviders.find(function(p){return p.id===providerId;}).name;});// If merging user data from database is enabled ...\nif(MERGE_DB_USER){switch(userDbQuery.status){case\"loading\":// Return null user so auth is considered loading until we have db data to merge\nreturn null;case\"error\":// Log query error to console\nconsole.error(userDbQuery.error);return null;case\"success\":// If user data doesn't exist we assume this means user just signed up and the createUser\n// function just hasn't completed. We return null to indicate a loading state.\nif(userDbQuery.data===null)return null;// Merge user data from database into finalUser object\nObject.assign(finalUser,userDbQuery.data);// no default\n}}return finalUser;},[user,userDbQuery]);}var allProviders=[{id:\"password\",name:\"password\"},{id:\"google.com\",name:\"google\",providerMethod:firebase.auth.GoogleAuthProvider},{id:\"facebook.com\",name:\"facebook\",providerMethod:firebase.auth.FacebookAuthProvider,parameters:{// Tell fb to show popup size UI instead of full website\ndisplay:\"popup\"}},{id:\"twitter.com\",name:\"twitter\",providerMethod:firebase.auth.TwitterAuthProvider},{id:\"github.com\",name:\"github\",providerMethod:firebase.auth.GithubAuthProvider}];// Waits on Firebase user to be initialized before resolving promise\n// This is used to ensure auth is ready before any writing to the db can happen\nvar waitForFirebase=function waitForFirebase(){return new Promise(function(resolve){var unsubscribe=firebase.auth().onAuthStateChanged(function(user){if(user){resolve(user);// Resolve promise when we have a user\nunsubscribe();// Prevent from firing again\n}});});};var getFromQueryString=function getFromQueryString(key){return queryString.parse(window.location.search)[key];};","map":{"version":3,"sources":["/Users/johnyoo/Desktop/OtterSpace/src/util/auth.js"],"names":["React","useState","useEffect","useMemo","useContext","createContext","queryString","firebase","useUser","createUser","updateUser","history","PageLoader","MERGE_DB_USER","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","finalUser","usePrepareUser","handleAuth","response","additionalUserInfo","waitForFirebase","isNewUser","uid","email","signup","password","createUserWithEmailAndPassword","then","signin","signInWithEmailAndPassword","signinWithProvider","name","providerData","allProviders","find","p","provider","providerMethod","parameters","setCustomParameters","signInWithPopup","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","code","resetCode","getFromQueryString","updateEmail","currentUser","updatePassword","updateProfile","data","picture","fields","displayName","photoURL","unsubscribe","onAuthStateChanged","requireAuth","Component","props","replace","userDbQuery","providers","map","providerId","id","status","console","error","Object","assign","GoogleAuthProvider","FacebookAuthProvider","display","TwitterAuthProvider","GithubAuthProvider","Promise","resolve","key","parse","window","location","search"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useContext,\n  createContext,\n} from \"react\";\nimport queryString from \"query-string\";\nimport firebase from \"./firebase\";\nimport { useUser, createUser, updateUser } from \"./db\";\nimport { history } from \"./router\";\nimport PageLoader from \"./../components/PageLoader\";\n\n// Whether to merge user data from database into auth.user\nconst MERGE_DB_USER = true;\n\nconst authContext = createContext();\n\n// Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook that enables any component to subscribe to auth state\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  // Store auth user object\n  const [user, setUser] = useState(null);\n\n  // Format final user object and merge extra data from database\n  const finalUser = usePrepareUser(user);\n\n  // Handle response from authentication functions\n  const handleAuth = async (response) => {\n    const { user, additionalUserInfo } = response;\n\n    // Ensure Firebase is actually ready before we continue\n    await waitForFirebase();\n\n    // Create the user in the database if they are new\n    if (additionalUserInfo.isNewUser) {\n      await createUser(user.uid, { email: user.email });\n    }\n\n    // Update user in state\n    setUser(user);\n    return user;\n  };\n\n  const signup = (email, password) => {\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(handleAuth);\n  };\n\n  const signin = (email, password) => {\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(handleAuth);\n  };\n\n  const signinWithProvider = (name) => {\n    // Get provider data by name (\"password\", \"google\", etc)\n    const providerData = allProviders.find((p) => p.name === name);\n\n    const provider = new providerData.providerMethod();\n\n    if (providerData.parameters) {\n      provider.setCustomParameters(providerData.parameters);\n    }\n\n    return firebase.auth().signInWithPopup(provider).then(handleAuth);\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut();\n  };\n\n  const sendPasswordResetEmail = (email) => {\n    return firebase.auth().sendPasswordResetEmail(email);\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"oobCode\");\n\n    return firebase.auth().confirmPasswordReset(resetCode, password);\n  };\n\n  const updateEmail = (email) => {\n    return firebase\n      .auth()\n      .currentUser.updateEmail(email)\n      .then(() => {\n        // Update user in state (since onAuthStateChanged doesn't get called)\n        setUser(firebase.auth().currentUser);\n      });\n  };\n\n  const updatePassword = (password) => {\n    return firebase.auth().currentUser.updatePassword(password);\n  };\n\n  // Update auth user and persist to database (including any custom values in data)\n  // Forms can call this function instead of multiple auth/db update functions\n  const updateProfile = async (data) => {\n    const { email, name, picture } = data;\n\n    // Update auth email\n    if (email) {\n      await firebase.auth().currentUser.updateEmail(email);\n    }\n\n    // Update auth profile fields\n    if (name || picture) {\n      let fields = {};\n      if (name) fields.displayName = name;\n      if (picture) fields.photoURL = picture;\n      await firebase.auth().currentUser.updateProfile(fields);\n    }\n\n    // Persist all data to the database\n    await updateUser(user.uid, data);\n\n    // Update user in state\n    setUser(firebase.auth().currentUser);\n  };\n\n  useEffect(() => {\n    // Subscribe to user on mount\n    const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    });\n\n    // Unsubscribe on cleanup\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user: finalUser,\n    signup,\n    signin,\n    signinWithProvider,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateEmail,\n    updatePassword,\n    updateProfile,\n  };\n}\n\n// A Higher Order Component for requiring authentication\nexport const requireAuth = (Component) => {\n  return (props) => {\n    // Get authenticated user\n    const auth = useAuth();\n\n    useEffect(() => {\n      // Redirect if not signed in\n      if (auth.user === false) {\n        history.replace(\"/auth/signin\");\n      }\n    }, [auth]);\n\n    // Show loading indicator\n    // We're either loading (user is null) or we're about to redirect (user is false)\n    if (!auth.user) {\n      return <PageLoader />;\n    }\n\n    // Render component now that we have user\n    return <Component {...props} />;\n  };\n};\n\n// Format final user object and merge extra data from database\nfunction usePrepareUser(user) {\n  // Fetch extra data from database (if enabled and auth user has been fetched)\n  const userDbQuery = useUser(MERGE_DB_USER && user && user.uid);\n\n  // Memoize so we only create a new object if user or userDbQuery changes\n  return useMemo(() => {\n    // Return if auth user is null (loading) or false (not authenticated)\n    if (!user) return user;\n\n    // Data we want to include from auth user object\n    let finalUser = {\n      uid: user.uid,\n      email: user.email,\n      name: user.displayName,\n      picture: user.photoURL,\n    };\n\n    // Include an array of user's auth providers, such as [\"password\", \"google\", etc]\n    // Components can read this to prompt user to re-auth with the correct provider\n    finalUser.providers = user.providerData.map(({ providerId }) => {\n      return allProviders.find((p) => p.id === providerId).name;\n    });\n\n    // If merging user data from database is enabled ...\n    if (MERGE_DB_USER) {\n      switch (userDbQuery.status) {\n        case \"loading\":\n          // Return null user so auth is considered loading until we have db data to merge\n          return null;\n        case \"error\":\n          // Log query error to console\n          console.error(userDbQuery.error);\n          return null;\n        case \"success\":\n          // If user data doesn't exist we assume this means user just signed up and the createUser\n          // function just hasn't completed. We return null to indicate a loading state.\n          if (userDbQuery.data === null) return null;\n\n          // Merge user data from database into finalUser object\n          Object.assign(finalUser, userDbQuery.data);\n\n        // no default\n      }\n    }\n\n    return finalUser;\n  }, [user, userDbQuery]);\n}\n\nconst allProviders = [\n  {\n    id: \"password\",\n    name: \"password\",\n  },\n  {\n    id: \"google.com\",\n    name: \"google\",\n    providerMethod: firebase.auth.GoogleAuthProvider,\n  },\n  {\n    id: \"facebook.com\",\n    name: \"facebook\",\n    providerMethod: firebase.auth.FacebookAuthProvider,\n    parameters: {\n      // Tell fb to show popup size UI instead of full website\n      display: \"popup\",\n    },\n  },\n  {\n    id: \"twitter.com\",\n    name: \"twitter\",\n    providerMethod: firebase.auth.TwitterAuthProvider,\n  },\n  {\n    id: \"github.com\",\n    name: \"github\",\n    providerMethod: firebase.auth.GithubAuthProvider,\n  },\n];\n\n// Waits on Firebase user to be initialized before resolving promise\n// This is used to ensure auth is ready before any writing to the db can happen\nconst waitForFirebase = () => {\n  return new Promise((resolve) => {\n    const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        resolve(user); // Resolve promise when we have a user\n        unsubscribe(); // Prevent from firing again\n      }\n    });\n  });\n};\n\nconst getFromQueryString = (key) => {\n  return queryString.parse(window.location.search)[key];\n};\n"]},"metadata":{},"sourceType":"module"}