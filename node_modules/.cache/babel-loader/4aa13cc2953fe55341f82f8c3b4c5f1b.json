{"ast":null,"code":"var _jsxFileName = \"/Users/johnyoo/Desktop/OtterSpace/src/components/SettingsSection.js\";\nimport React, { useState } from \"react\";\nimport Section from \"./Section\";\nimport ReauthModal from \"./ReauthModal\";\nimport SettingsNav from \"./SettingsNav\";\nimport Container from \"react-bootstrap/Container\";\nimport FormAlert from \"./FormAlert\";\nimport SettingsGeneral from \"./SettingsGeneral\";\nimport SettingsPassword from \"./SettingsPassword\";\nimport { useAuth } from \"./../util/auth.js\";\n\nfunction SettingsSection(props) {\n  const auth = useAuth();\n  const [formAlert, setFormAlert] = useState(null); // State to control whether we show a re-authentication flow\n  // Required by some security sensitive actions, such as changing password.\n\n  const [reauthState, setReauthState] = useState({\n    show: false\n  });\n  const validSections = {\n    general: true,\n    password: true\n  };\n  const section = validSections[props.section] ? props.section : \"general\"; // Handle status of type \"success\", \"error\", or \"requires-recent-login\"\n  // We don't treat \"requires-recent-login\" as an error as we handle it\n  // gracefully by taking the user through a re-authentication flow.\n\n  const handleStatus = ({\n    type,\n    message,\n    callback\n  }) => {\n    if (type === \"requires-recent-login\") {\n      // First clear any existing message\n      setFormAlert(null); // Then update state to show re-authentication modal\n\n      setReauthState({\n        show: true,\n        // Failed action to try again after reauth\n        callback: callback\n      });\n    } else {\n      // Display message to user (type is success or error)\n      setFormAlert({\n        type: type,\n        message: message\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Section, {\n    bg: props.bg,\n    textColor: props.textColor,\n    size: props.size,\n    bgImage: props.bgImage,\n    bgImageOpacity: props.bgImageOpacity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, reauthState.show && /*#__PURE__*/React.createElement(ReauthModal, {\n    callback: reauthState.callback,\n    provider: auth.user.providers[0],\n    onDone: () => setReauthState({\n      show: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SettingsNav, {\n    activeKey: section,\n    className: \"justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: \"mt-5\",\n    style: {\n      maxWidth: section !== \"billing\" ? \"450px\" : undefined\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, formAlert && /*#__PURE__*/React.createElement(FormAlert, {\n    type: formAlert.type,\n    message: formAlert.message,\n    className: \"mx-auto mb-4\",\n    style: {\n      maxWidth: \"450px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), section === \"general\" && /*#__PURE__*/React.createElement(SettingsGeneral, {\n    onStatus: handleStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }), section === \"password\" && /*#__PURE__*/React.createElement(SettingsPassword, {\n    onStatus: handleStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default SettingsSection;","map":{"version":3,"sources":["/Users/johnyoo/Desktop/OtterSpace/src/components/SettingsSection.js"],"names":["React","useState","Section","ReauthModal","SettingsNav","Container","FormAlert","SettingsGeneral","SettingsPassword","useAuth","SettingsSection","props","auth","formAlert","setFormAlert","reauthState","setReauthState","show","validSections","general","password","section","handleStatus","type","message","callback","bg","textColor","size","bgImage","bgImageOpacity","user","providers","maxWidth","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Section from \"./Section\";\nimport ReauthModal from \"./ReauthModal\";\nimport SettingsNav from \"./SettingsNav\";\nimport Container from \"react-bootstrap/Container\";\nimport FormAlert from \"./FormAlert\";\nimport SettingsGeneral from \"./SettingsGeneral\";\nimport SettingsPassword from \"./SettingsPassword\";\nimport { useAuth } from \"./../util/auth.js\";\n\nfunction SettingsSection(props) {\n  const auth = useAuth();\n  const [formAlert, setFormAlert] = useState(null);\n\n  // State to control whether we show a re-authentication flow\n  // Required by some security sensitive actions, such as changing password.\n  const [reauthState, setReauthState] = useState({\n    show: false,\n  });\n\n  const validSections = {\n    general: true,\n    password: true,\n  };\n\n  const section = validSections[props.section] ? props.section : \"general\";\n\n  // Handle status of type \"success\", \"error\", or \"requires-recent-login\"\n  // We don't treat \"requires-recent-login\" as an error as we handle it\n  // gracefully by taking the user through a re-authentication flow.\n  const handleStatus = ({ type, message, callback }) => {\n    if (type === \"requires-recent-login\") {\n      // First clear any existing message\n      setFormAlert(null);\n      // Then update state to show re-authentication modal\n      setReauthState({\n        show: true,\n        // Failed action to try again after reauth\n        callback: callback,\n      });\n    } else {\n      // Display message to user (type is success or error)\n      setFormAlert({\n        type: type,\n        message: message,\n      });\n    }\n  };\n\n  return (\n    <Section\n      bg={props.bg}\n      textColor={props.textColor}\n      size={props.size}\n      bgImage={props.bgImage}\n      bgImageOpacity={props.bgImageOpacity}\n    >\n      {reauthState.show && (\n        <ReauthModal\n          callback={reauthState.callback}\n          provider={auth.user.providers[0]}\n          onDone={() => setReauthState({ show: false })}\n        ></ReauthModal>\n      )}\n\n      <SettingsNav\n        activeKey={section}\n        className=\"justify-content-center\"\n      ></SettingsNav>\n      <Container\n        className=\"mt-5\"\n        style={{\n          maxWidth: section !== \"billing\" ? \"450px\" : undefined,\n        }}\n      >\n        {formAlert && (\n          <FormAlert\n            type={formAlert.type}\n            message={formAlert.message}\n            className=\"mx-auto mb-4\"\n            style={{ maxWidth: \"450px\" }}\n          ></FormAlert>\n        )}\n\n        {section === \"general\" && (\n          <SettingsGeneral onStatus={handleStatus}></SettingsGeneral>\n        )}\n\n        {section === \"password\" && (\n          <SettingsPassword onStatus={handleStatus}></SettingsPassword>\n        )}\n      </Container>\n    </Section>\n  );\n}\n\nexport default SettingsSection;\n"]},"metadata":{},"sourceType":"module"}