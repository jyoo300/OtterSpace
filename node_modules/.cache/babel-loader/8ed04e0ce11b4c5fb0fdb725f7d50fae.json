{"ast":null,"code":"import _slicedToArray from\"/Users/johnyoo/Desktop/OtterSpace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/johnyoo/Desktop/OtterSpace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useState,useEffect,useRef}from\"react\";import firebase from\"./firebase\";var firestore=firebase.firestore();/**** USERS ****/ // Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\nexport function useUser(uid){return useQuery(uid&&firestore.collection(\"users\").doc(uid));}// Update an existing user\nexport function updateUser(uid,data){return firestore.collection(\"users\").doc(uid).update(data);}// Create a new user\nexport function createUser(uid,data){return firestore.collection(\"users\").doc(uid).set(_objectSpread({uid:uid},data),{merge:true});}/**** ITEMS ****/ /* Example query functions (modify to your needs) */ // Fetch all items by owner (hook)\nexport function useItemsByOwner(owner){return useQuery(owner&&firestore.collection(\"items\").where(\"owner\",\"==\",owner));}// Fetch item data\nexport function useItem(id){return useQuery(id&&firestore.collection(\"items\").doc(id));}// Update an item\nexport function updateItem(id,data){return firestore.collection(\"items\").doc(id).update(data);}// Create a new item\nexport function createItem(data){return firestore.collection(\"items\").add(data);}/**** HELPERS ****/ // Custom React hook that subscribes to a Firestore query\nfunction useQuery(query){var initialState={status:\"loading\",data:undefined,error:null};var _useState=useState(initialState),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];// Gives us previous query object if query is the same\n// ensuring we don't unsubscribe and resubscribe below.\nvar queryCached=useQueryCache(query);useEffect(function(){// Subscribe to query unless falsy, which indicates we're\n// waiting on other data needed to construct the query object.\nif(queryCached){return queryCached.onSnapshot(function(response){// Get data for collection or doc\nvar data=response.docs?getCollectionData(response):getDocData(response);setState({status:\"success\",data:data,error:null});},function(error){setState(function(state){return{status:\"error\",data:undefined,error:error};});});}else{// Reset back to initial state\nif(state.status!==initialState.status){setState(initialState);}}},[queryCached]);return state;}// Get doc data\nfunction getDocData(doc){return doc.exists===true?_objectSpread({id:doc.id},doc.data()):null;}// Get array of doc data from collection\nfunction getCollectionData(collection){return collection.docs.map(function(doc){return _objectSpread({id:doc.id},doc.data());});}function useQueryCache(query){// Ref for storing previous query object\nvar previousRef=useRef();var previous=previousRef.current;// Determine if query object is equal to previous\nvar isEqual=!previous&&!query||previous&&query&&previous.isEqual(query);// If not equal update previous to query (for next render)\n// and then return new query below.\nuseEffect(function(){if(!isEqual){previousRef.current=query;}});return isEqual?previous:query;}// firestore.collection(\"users\").add({\n//   first: \"Ada\",\n//   last: \"Lovelace\",\n//   born: 1815\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(error) {\n//   console.error(\"Error adding document: \", error);\n// });","map":{"version":3,"sources":["/Users/johnyoo/Desktop/OtterSpace/src/util/db.js"],"names":["useState","useEffect","useRef","firebase","firestore","useUser","uid","useQuery","collection","doc","updateUser","data","update","createUser","set","merge","useItemsByOwner","owner","where","useItem","id","updateItem","createItem","add","query","initialState","status","undefined","error","state","setState","queryCached","useQueryCache","onSnapshot","response","docs","getCollectionData","getDocData","exists","map","previousRef","previous","current","isEqual"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport firebase from \"./firebase\";\n\nconst firestore = firebase.firestore();\n\n/**** USERS ****/\n\n// Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\nexport function useUser(uid) {\n  return useQuery(uid && firestore.collection(\"users\").doc(uid));\n}\n\n// Update an existing user\nexport function updateUser(uid, data) {\n  return firestore.collection(\"users\").doc(uid).update(data);\n}\n\n// Create a new user\nexport function createUser(uid, data) {\n  return firestore\n    .collection(\"users\")\n    .doc(uid)\n    .set({ uid, ...data }, { merge: true });\n}\n\n/**** ITEMS ****/\n/* Example query functions (modify to your needs) */\n\n// Fetch all items by owner (hook)\nexport function useItemsByOwner(owner) {\n  return useQuery(\n    owner && firestore.collection(\"items\").where(\"owner\", \"==\", owner)\n  );\n}\n\n// Fetch item data\nexport function useItem(id) {\n  return useQuery(id && firestore.collection(\"items\").doc(id));\n}\n\n// Update an item\nexport function updateItem(id, data) {\n  return firestore.collection(\"items\").doc(id).update(data);\n}\n\n// Create a new item\nexport function createItem(data) {\n  return firestore.collection(\"items\").add(data);\n}\n\n/**** HELPERS ****/\n\n// Custom React hook that subscribes to a Firestore query\nfunction useQuery(query) {\n  const initialState = {\n    status: \"loading\",\n    data: undefined,\n    error: null,\n  };\n\n  const [state, setState] = useState(initialState);\n\n  // Gives us previous query object if query is the same\n  // ensuring we don't unsubscribe and resubscribe below.\n  const queryCached = useQueryCache(query);\n\n  useEffect(() => {\n    // Subscribe to query unless falsy, which indicates we're\n    // waiting on other data needed to construct the query object.\n    if (queryCached) {\n      return queryCached.onSnapshot(\n        (response) => {\n          // Get data for collection or doc\n          const data = response.docs\n            ? getCollectionData(response)\n            : getDocData(response);\n\n          setState({\n            status: \"success\",\n            data: data,\n            error: null,\n          });\n        },\n        (error) => {\n          setState((state) => ({\n            status: \"error\",\n            data: undefined,\n            error: error,\n          }));\n        }\n      );\n    } else {\n      // Reset back to initial state\n      if (state.status !== initialState.status) {\n        setState(initialState);\n      }\n    }\n  }, [queryCached]);\n\n  return state;\n}\n\n// Get doc data\nfunction getDocData(doc) {\n  return doc.exists === true ? { id: doc.id, ...doc.data() } : null;\n}\n\n// Get array of doc data from collection\nfunction getCollectionData(collection) {\n  return collection.docs.map((doc) => {\n    return { id: doc.id, ...doc.data() };\n  });\n}\n\nfunction useQueryCache(query) {\n  // Ref for storing previous query object\n  const previousRef = useRef();\n  const previous = previousRef.current;\n\n  // Determine if query object is equal to previous\n  const isEqual =\n    (!previous && !query) || (previous && query && previous.isEqual(query));\n\n  // If not equal update previous to query (for next render)\n  // and then return new query below.\n  useEffect(() => {\n    if (!isEqual) {\n      previousRef.current = query;\n    }\n  });\n\n  return isEqual ? previous : query;\n}\n\n// firestore.collection(\"users\").add({\n//   first: \"Ada\",\n//   last: \"Lovelace\",\n//   born: 1815\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(error) {\n//   console.error(\"Error adding document: \", error);\n// });"]},"metadata":{},"sourceType":"module"}